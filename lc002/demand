## 两数相加
给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
请你将两个数相加，并以相同形式返回一个表示和的链表。
你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 

示例 1:
输入:l1 = [2,4,3], l2 = [5,6,4]
输出:[7,0,8]
解释:342 + 465 = 807.

示例 2:
输入:l1 = [0], l2 = [0]
输出:[0]

示例 3:
输入:l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出:[8,9,9,9,0,0,0,1] 

提示:
每个链表中的节点数在范围 [1, 100] 内
0 <= Node.val <= 9
题目数据保证列表表示的数字不含前导零

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
        {
            return l2;
        }
        if(l2 == NULL)
        {
            return l1;
        }

        int carry = 0, digit = 0;
        ListNode* ptr1 = l1, *ptr2 = l2;
        ListNode* ptrpre1 = l1, *ptrpre2 = l2;
        struct ListNode* target;
        struct ListNode* newNode;
        while(ptr1 || ptr2)
        {
            if(ptr1 && ptr2)
            {
                digit = (ptr1->val + ptr2->val + carry) % 10;
                carry = (ptr1->val + ptr2->val + carry) / 10;
                ptr1->val = digit;
                ptr2->val = digit;
                ptrpre1 = ptr1;
                ptrpre2 = ptr2;
                ptr1 = ptr1->next;
                ptr2 = ptr2->next;
                target = l1;
            }
            else if(ptr1 == NULL)
            {
                digit = (ptr2->val + carry) % 10;
                carry = (ptr2->val + carry) / 10;
                ptr2->val = digit;
                ptrpre2 = ptr2;
                ptr2 = ptr2->next;
                target = l2;
            }
            else if(ptr2 == NULL)
            {
                digit = (ptr1->val + carry) % 10;
                carry = (ptr1->val + carry) / 10;
                ptr1->val = digit;
                ptrpre1 = ptr1;
                ptr1 = ptr1->next;
                target = l1;
            }
        }

        if(target == l1)
        {
            if(carry != 0)
            {
                newNode = new ListNode(carry);
                ptrpre1->next = newNode;
            }
            return l1;
        }
        else
        {
            if(carry != 0)
            {
                newNode = new struct ListNode(carry);
                ptrpre2->next = newNode;
            }
            return l2;
        }
    }
};